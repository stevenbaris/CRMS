// <auto-generated />
using System;
using CRMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMS.Migrations
{
    [DbContext(typeof(CRMSDbContext))]
    [Migration("20230412051215_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2def4f0-004b-4284-ab90-2986bfe8bebc"),
                            AccessFailedCount = 0,
                            Address = "PJ Lhuiller",
                            ConcurrencyStamp = "dc377ec5-0639-401e-852c-5aa82ebd4666",
                            DOB = new DateTime(2023, 4, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "su@crms.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "SU@CRMS.COM",
                            NormalizedUserName = "SU@CRMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKPUJsRUzwop1+DrfQtOSMNFD0t3UAsjaODIhKaoPC8YMjR5i/Gt0kEdObngmij/iA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "su@crms.com"
                        },
                        new
                        {
                            Id = new Guid("ec3997af-76a3-450f-8e1e-4caa175134d0"),
                            AccessFailedCount = 0,
                            Address = "PJ Lhuiller",
                            ConcurrencyStamp = "186cde7d-3088-4f82-a368-d511fb68279d",
                            DOB = new DateTime(2023, 4, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "user@crms.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER@CRMS.COM",
                            NormalizedUserName = "USER@CRMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKu6GHl+HQ9G2qbBZmGgJf6H6ewYWl9ikdsATOhCIRdUZiWGl0Y7//Esa+7YkAmJg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@crms.com"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Property<Guid>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactCreatorID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_Id");

                    b.HasIndex("ContactCreatorID");

                    b.HasIndex("ContactOwnerID");

                    b.ToTable("CONTACTS", (string)null);

                    b.HasData(
                        new
                        {
                            Contact_Id = new Guid("ae175226-3e1e-4c0d-9f86-e5a5fec18caf"),
                            ContactCreatorID = new Guid("e2def4f0-004b-4284-ab90-2986bfe8bebc"),
                            CreateDate = new DateTime(2023, 4, 12, 5, 12, 15, 143, DateTimeKind.Utc).AddTicks(4900),
                            DOB = new DateTime(1994, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charl.legista@gmail.com",
                            FirstName = "Charl",
                            Gender = 0,
                            LastName = "Legista",
                            PhoneNumber = "09052214812"
                        },
                        new
                        {
                            Contact_Id = new Guid("6ba7b3b9-3e22-4b37-9117-f7611810f2e2"),
                            ContactCreatorID = new Guid("e2def4f0-004b-4284-ab90-2986bfe8bebc"),
                            ContactOwnerID = new Guid("ec3997af-76a3-450f-8e1e-4caa175134d0"),
                            CreateDate = new DateTime(2023, 4, 7, 5, 12, 15, 143, DateTimeKind.Utc).AddTicks(4909),
                            DOB = new DateTime(1999, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateAssigned = new DateTime(2023, 4, 9, 5, 12, 15, 143, DateTimeKind.Utc).AddTicks(4904),
                            Email = "steven.baris14@gmail.com",
                            FirstName = "Steven",
                            Gender = 0,
                            LastName = "Baris",
                            PhoneNumber = "09123456789"
                        },
                        new
                        {
                            Contact_Id = new Guid("a3248adc-6871-4875-99b2-afb2ccb482d5"),
                            ContactCreatorID = new Guid("ec3997af-76a3-450f-8e1e-4caa175134d0"),
                            ContactOwnerID = new Guid("ec3997af-76a3-450f-8e1e-4caa175134d0"),
                            CreateDate = new DateTime(2023, 4, 9, 5, 12, 15, 143, DateTimeKind.Utc).AddTicks(4913),
                            DOB = new DateTime(1996, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateAssigned = new DateTime(2023, 4, 11, 5, 12, 15, 143, DateTimeKind.Utc).AddTicks(4912),
                            Email = "cust.no1@gmail.com",
                            FirstName = "Customer",
                            Gender = 1,
                            LastName = "Number1",
                            PhoneNumber = "09987654321"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.AppointmentPurpose", b =>
                {
                    b.Property<Guid>("Purpose_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurposeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Purpose_Id");

                    b.ToTable("APPOINTMENT_PURPOSES", (string)null);

                    b.HasData(
                        new
                        {
                            Purpose_Id = new Guid("52aa9b2b-7e43-445c-b031-61146930f6a2"),
                            PurposeName = "Fact-Find"
                        },
                        new
                        {
                            Purpose_Id = new Guid("92d258bd-0a9f-4341-8aa1-522c9d6d5076"),
                            PurposeName = "Presentation"
                        },
                        new
                        {
                            Purpose_Id = new Guid("651c59df-43ec-4828-9a15-93c90ba30401"),
                            PurposeName = "Proposal"
                        },
                        new
                        {
                            Purpose_Id = new Guid("637d0827-193d-46ff-8854-2cd92c859b61"),
                            PurposeName = "Sales Closing"
                        },
                        new
                        {
                            Purpose_Id = new Guid("fda143f4-70da-4c94-81af-533a9f9de670"),
                            PurposeName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.CommunicationMethod", b =>
                {
                    b.Property<Guid>("CommunicationMethod_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicationMethod_Id");

                    b.ToTable("ENGAGEMENT_COMMUNICATION METHODS", (string)null);

                    b.HasData(
                        new
                        {
                            CommunicationMethod_Id = new Guid("c7d5c41b-c15a-4027-812f-c93ccf8bf70a"),
                            CommunicationMethodName = "Facebook"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("067f75df-da29-4df5-8920-a4126f675f0b"),
                            CommunicationMethodName = "Instagram"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("e743791f-9a41-4e28-acbe-2d2d12002524"),
                            CommunicationMethodName = "WhatsApp"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("3df9b29f-f020-4a71-adc2-032306768685"),
                            CommunicationMethodName = "Line"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("3d6bdbfe-0bb6-4082-9089-7fa1ee691aca"),
                            CommunicationMethodName = "Phone Call"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("ae2fd8a6-455e-42d8-81da-d41e46282029"),
                            CommunicationMethodName = "Test Message"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("f417a411-9b0e-4285-a788-a1d3ebef0f6e"),
                            CommunicationMethodName = "Email"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("04271725-5277-40b9-b1bc-b4db6ce62b2f"),
                            CommunicationMethodName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.Effectivity", b =>
                {
                    b.Property<Guid>("Effectivity_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Effectivity_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Effectivity_Id");

                    b.ToTable("ENGAGEMENT_EFFECTIVITY", (string)null);

                    b.HasData(
                        new
                        {
                            Effectivity_Id = new Guid("b0bc2f95-0411-4031-8e7d-047ce4426f48"),
                            Effectivity_Name = "Not Read"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("a4b3944b-abaf-4695-98c6-131357b729bc"),
                            Effectivity_Name = "Read but no response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("be5b7b03-6cf9-4bc7-abcd-f196a11f9f08"),
                            Effectivity_Name = "Simple Response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("7c60a9aa-2d95-4d41-9239-332acf405646"),
                            Effectivity_Name = "Good Engagement"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.EngagementType", b =>
                {
                    b.Property<Guid>("EType_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngagementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EType_Id");

                    b.ToTable("ENGAGEMENT_ENGAGEMENT-TYPES", (string)null);

                    b.HasData(
                        new
                        {
                            EType_Id = new Guid("1255a7a0-18c6-491a-b7d8-4ec589092b3f"),
                            EngagementName = "Congratulations"
                        },
                        new
                        {
                            EType_Id = new Guid("33d8e0f8-bbaa-49fa-80aa-14636de25388"),
                            EngagementName = "Birthday"
                        },
                        new
                        {
                            EType_Id = new Guid("08f1977c-8323-4101-b13d-cd11d070f58a"),
                            EngagementName = "Anniversary"
                        },
                        new
                        {
                            EType_Id = new Guid("9b090459-3a3d-4475-b738-ae1de8fe112e"),
                            EngagementName = "Holiday"
                        },
                        new
                        {
                            EType_Id = new Guid("fc500cb4-7873-4b91-84b1-fa888a8c5298"),
                            EngagementName = "Discount"
                        },
                        new
                        {
                            EType_Id = new Guid("72d15321-8700-42ea-9700-5dd9f8f528fc"),
                            EngagementName = "Company News"
                        },
                        new
                        {
                            EType_Id = new Guid("4a13619a-8686-4390-9ed5-04668650275c"),
                            EngagementName = "New Product"
                        },
                        new
                        {
                            EType_Id = new Guid("8acbf75c-88dd-4110-8995-5c24d5ca1b85"),
                            EngagementName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.LeadStatus", b =>
                {
                    b.Property<Guid>("LeadStatus_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeadStatus_Id");

                    b.ToTable("LEADS_STATUSES", (string)null);

                    b.HasData(
                        new
                        {
                            LeadStatus_Id = new Guid("00579b85-faa5-4051-b50e-8f55f9fbeddc"),
                            LeadStatusName = "Contacted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("1da3ef32-0407-4bbd-b60b-afc9992259e9"),
                            LeadStatusName = "Met"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("79146b83-f4c7-4c17-b49a-e2bdaeee4d73"),
                            LeadStatusName = "Proposal Generated"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("9f866d3b-8032-48d0-9547-3772ecda24d7"),
                            LeadStatusName = "Application Submitted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("f0032111-7a03-4a87-95e6-163acb13a9d6"),
                            LeadStatusName = "Policy Issued"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("f50dba28-cc61-49a8-ae3a-28f35b845277"),
                            LeadStatusName = "Lead is Dead"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.Source", b =>
                {
                    b.Property<Guid>("Source_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Source_Id");

                    b.ToTable("LEADS_SOURCES", (string)null);

                    b.HasData(
                        new
                        {
                            Source_Id = new Guid("a61b1909-d441-4716-ab62-e85acaa7aae6"),
                            SourceName = "Referral"
                        },
                        new
                        {
                            Source_Id = new Guid("18de33c5-f09e-43ef-9d8c-5970794d5326"),
                            SourceName = "Friend"
                        },
                        new
                        {
                            Source_Id = new Guid("e040bf43-6560-4a68-8e07-93ab0517ced8"),
                            SourceName = "Compony-Generated"
                        },
                        new
                        {
                            Source_Id = new Guid("2c98a3d6-50da-432b-9d87-b9639198b8f5"),
                            SourceName = "Social Media"
                        },
                        new
                        {
                            Source_Id = new Guid("d584ef12-549d-4bc2-88e2-9955faaafa73"),
                            SourceName = "Webinar"
                        },
                        new
                        {
                            Source_Id = new Guid("d31c1449-1307-483b-8f7f-c643ebd98146"),
                            SourceName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Records.Appointments", b =>
                {
                    b.Property<Guid>("Appointment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchedStatus")
                        .HasColumnType("int");

                    b.HasKey("Appointment_Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PurposeId");

                    b.ToTable("APPOINTMENTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.Property<Guid?>("RollingTransactions_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TransacationTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RollingTransactions_ID");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("ROLLING TRANSACTIONS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("76d93ea9-600a-4f9d-9c72-e159e01f2d54"),
                            ConcurrencyStamp = "ac9bc174-27d5-402b-87fa-7d2129e04e0c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b445700d-c409-4c68-83e8-8a355e2703ea"),
                            ConcurrencyStamp = "a4d181a0-125b-454f-af30-b8e246c4e7d8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e2def4f0-004b-4284-ab90-2986bfe8bebc"),
                            RoleId = new Guid("76d93ea9-600a-4f9d-9c72-e159e01f2d54")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("ContactCreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ContactCreator");

                    b.HasOne("CRMS.Models.ApplicationUser", "Owner")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactOwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ContactOwner");

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CRMS.Models.Records.Appointments", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "prospect")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentProspect");

                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentCreator");

                    b.HasOne("CRMS.Models.Customization.AppointmentPurpose", "AppointmentPurpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentPurpose");

                    b.Navigation("AppointmentPurpose");

                    b.Navigation("User");

                    b.Navigation("prospect");
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "Contacts")
                        .WithOne("Transactions")
                        .HasForeignKey("CRMS.Models.RollingTransactions", "ContactId")
                        .HasConstraintName("FK_TransactionsOfContact");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
