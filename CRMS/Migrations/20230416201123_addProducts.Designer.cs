// <auto-generated />
using System;
using CRMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMS.Migrations
{
    [DbContext(typeof(CRMSDbContext))]
    [Migration("20230416201123_addProducts")]
    partial class addProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CityAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("14b3ff27-4019-4c20-bb27-902ea8245e2b"),
                            AccessFailedCount = 0,
                            CityAddress = "Makati",
                            ConcurrencyStamp = "5de1fec1-64d3-47b5-87b1-73cf1b5cd0af",
                            DOB = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "su@crms.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "SU@CRMS.COM",
                            NormalizedUserName = "SU@CRMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEALejIZjgYsHWvqv5KUtjE8s3qTlruo3pLdktJGnd1PldwT7JSh4Y3Ucpma4W0RVKw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "su@crms.com"
                        },
                        new
                        {
                            Id = new Guid("2da46bb1-2037-407e-8adc-97541a51c808"),
                            AccessFailedCount = 0,
                            CityAddress = "Makati",
                            ConcurrencyStamp = "08f4c935-4a51-4159-bdde-d83ce74cefbc",
                            DOB = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "user@crms.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER@CRMS.COM",
                            NormalizedUserName = "USER@CRMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdLxL/hmB6anJZq2Kc7u2F5pt3gOKuYheL+NkhBsnj5Q9hTqIAJjvBr59vefk0Xbw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@crms.com"
                        },
                        new
                        {
                            Id = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304"),
                            AccessFailedCount = 0,
                            CityAddress = "Makati",
                            ConcurrencyStamp = "5d189312-c33b-4176-acc6-46739931bc29",
                            DOB = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "sys@crms.com",
                            EmailConfirmed = true,
                            FirstName = "SYSTEM",
                            LastName = "CRMS",
                            LockoutEnabled = true,
                            NormalizedEmail = "SYS@CRMS.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAEAACcQAAAAELZ8kZwXGVAdB9SbEPJdqknxke2RmORbDyWL/Y/NzHAcf6ABzpBVDI6vtcxhC9N8nQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "SYSTEM"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Property<Guid>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactCreatorID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Contact_Id");

                    b.HasIndex("ContactCreatorID");

                    b.HasIndex("ContactOwnerID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CONTACTS", (string)null);

                    b.HasData(
                        new
                        {
                            Contact_Id = new Guid("af3ba38c-0af9-4b9f-89b0-165ba8227c5c"),
                            ContactCreatorID = new Guid("14b3ff27-4019-4c20-bb27-902ea8245e2b"),
                            CreateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7595),
                            DOB = new DateTime(1994, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charl.legista@gmail.com",
                            FirstName = "Charl",
                            Gender = 0,
                            LastName = "Legista",
                            PhoneNumber = "09052214812",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7596),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Contact_Id = new Guid("a9a27b3f-0532-4285-ac77-bfaeaf9d8070"),
                            ContactCreatorID = new Guid("14b3ff27-4019-4c20-bb27-902ea8245e2b"),
                            ContactOwnerID = new Guid("2da46bb1-2037-407e-8adc-97541a51c808"),
                            CreateDate = new DateTime(2023, 4, 12, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7605),
                            DOB = new DateTime(1999, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateAssigned = new DateTime(2023, 4, 14, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7600),
                            Email = "steven.baris14@gmail.com",
                            FirstName = "Steven",
                            Gender = 0,
                            LastName = "Baris",
                            PhoneNumber = "09123456789",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7606),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Contact_Id = new Guid("fb720e17-4b85-43ce-8d50-3c55cd90d726"),
                            ContactCreatorID = new Guid("2da46bb1-2037-407e-8adc-97541a51c808"),
                            ContactOwnerID = new Guid("2da46bb1-2037-407e-8adc-97541a51c808"),
                            CreateDate = new DateTime(2023, 4, 14, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7611),
                            DOB = new DateTime(1996, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateAssigned = new DateTime(2023, 4, 16, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7609),
                            Email = "cust.no1@gmail.com",
                            FirstName = "Customer",
                            Gender = 1,
                            LastName = "Number1",
                            PhoneNumber = "09987654321",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7611),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.AppointmentPurpose", b =>
                {
                    b.Property<Guid>("Purpose_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurposeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Purpose_Id");

                    b.ToTable("APPOINTMENT_PURPOSES", (string)null);

                    b.HasData(
                        new
                        {
                            Purpose_Id = new Guid("91370c36-6cf9-4b27-affc-2a38abd7bb3e"),
                            PurposeName = "Fact-Find"
                        },
                        new
                        {
                            Purpose_Id = new Guid("503586f2-8c84-431a-922a-3f862f478e81"),
                            PurposeName = "Presentation"
                        },
                        new
                        {
                            Purpose_Id = new Guid("14859e03-ce92-4417-a27c-c19bcda6610a"),
                            PurposeName = "Proposal"
                        },
                        new
                        {
                            Purpose_Id = new Guid("83be4907-d85b-45c6-b652-f25975817573"),
                            PurposeName = "Sales Closing"
                        },
                        new
                        {
                            Purpose_Id = new Guid("a715221d-d4db-4904-918b-c13ff8eb9d97"),
                            PurposeName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.CommunicationMethod", b =>
                {
                    b.Property<Guid>("CommunicationMethod_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicationMethod_Id");

                    b.ToTable("ENGAGEMENT_COMMUNICATION METHODS", (string)null);

                    b.HasData(
                        new
                        {
                            CommunicationMethod_Id = new Guid("ed2db789-a35d-4801-be87-da3d8d82e294"),
                            CommunicationMethodName = "Facebook"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("614518cf-aeb7-4291-8741-97fce1415373"),
                            CommunicationMethodName = "Instagram"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("8e623ffa-af78-4f91-a5aa-4c2201397754"),
                            CommunicationMethodName = "WhatsApp"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("e3f5ab08-d84b-4a83-a433-1707cacfc7e1"),
                            CommunicationMethodName = "Line"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("fe224bce-6e9d-4ed5-a03a-781b9d1e0ee7"),
                            CommunicationMethodName = "Phone Call"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("2597ebdd-50ce-419c-822f-f5efe8c3d5a8"),
                            CommunicationMethodName = "Test Message"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("4fcac767-5706-48e9-9c51-8bf7343cc3fd"),
                            CommunicationMethodName = "Email"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("4ee70aea-5f83-4c9d-a0b7-5610e6de22a9"),
                            CommunicationMethodName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.Effectivity", b =>
                {
                    b.Property<Guid>("Effectivity_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Effectivity_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Effectivity_Id");

                    b.ToTable("ENGAGEMENT_EFFECTIVITY", (string)null);

                    b.HasData(
                        new
                        {
                            Effectivity_Id = new Guid("591610e4-99e3-4ab6-8b32-b930d0675685"),
                            Effectivity_Name = "Not Read"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("f0db339c-0c06-425c-be25-1ec67772d59a"),
                            Effectivity_Name = "Read but no response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("ea64e40d-e2bf-46ae-8ba6-890dbc22fde8"),
                            Effectivity_Name = "Simple Response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("508615c3-18d1-484c-872d-433f2ca15656"),
                            Effectivity_Name = "Good Engagement"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.EngagementType", b =>
                {
                    b.Property<Guid>("EType_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngagementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EType_Id");

                    b.ToTable("ENGAGEMENT_ENGAGEMENT-TYPES", (string)null);

                    b.HasData(
                        new
                        {
                            EType_Id = new Guid("d2f04e06-51f1-4ad6-9bc6-49edea1732b9"),
                            EngagementName = "Congratulations"
                        },
                        new
                        {
                            EType_Id = new Guid("466bc040-0403-4e89-a4d9-40d52211d6d4"),
                            EngagementName = "Birthday"
                        },
                        new
                        {
                            EType_Id = new Guid("c9b24004-414c-477f-9c5c-70f558ebd11e"),
                            EngagementName = "Anniversary"
                        },
                        new
                        {
                            EType_Id = new Guid("a08d748d-6f0c-4b6c-925a-1e610bd0f2e2"),
                            EngagementName = "Holiday"
                        },
                        new
                        {
                            EType_Id = new Guid("36eba0e6-5acc-400b-bfeb-875638c4b471"),
                            EngagementName = "Discount"
                        },
                        new
                        {
                            EType_Id = new Guid("58a79ada-6563-43f9-ad00-f748d5edbfc7"),
                            EngagementName = "Company News"
                        },
                        new
                        {
                            EType_Id = new Guid("9c8598a9-2417-4e78-8741-7fabfd34739b"),
                            EngagementName = "New Product"
                        },
                        new
                        {
                            EType_Id = new Guid("4af7e873-e8f5-44e5-86b9-90274cbdb606"),
                            EngagementName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.LeadStatus", b =>
                {
                    b.Property<Guid>("LeadStatus_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeadStatus_Id");

                    b.ToTable("LEADS_STATUSES", (string)null);

                    b.HasData(
                        new
                        {
                            LeadStatus_Id = new Guid("a37fa651-f596-4f23-a64a-c199e231651b"),
                            LeadStatusName = "Contacted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("10d05f62-ed46-4368-9930-a9d4c1a4f7b8"),
                            LeadStatusName = "Met"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("8090f852-6597-4e12-905c-0d7a872bc49e"),
                            LeadStatusName = "Proposal Generated"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("b6453842-4215-4012-ba79-bcc899eb6753"),
                            LeadStatusName = "Application Submitted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("f20ade28-b193-4b84-9609-b433426cbdfa"),
                            LeadStatusName = "Policy Issued"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("b741abbd-7d84-4bca-828d-79b3ee5dcadc"),
                            LeadStatusName = "Lead is Dead"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.Source", b =>
                {
                    b.Property<Guid>("Source_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Source_Id");

                    b.ToTable("LEADS_SOURCES", (string)null);

                    b.HasData(
                        new
                        {
                            Source_Id = new Guid("c1b243ab-abb8-487e-89bc-92d3a4613b60"),
                            SourceName = "Referral"
                        },
                        new
                        {
                            Source_Id = new Guid("e0422d5a-fe8a-4f99-b45b-a1d601fc30c4"),
                            SourceName = "Friend"
                        },
                        new
                        {
                            Source_Id = new Guid("716f890f-4183-4589-8b29-1d4c60df64c0"),
                            SourceName = "Compony-Generated"
                        },
                        new
                        {
                            Source_Id = new Guid("416cfdfc-540a-47b1-9a6b-cbbb44af5fa3"),
                            SourceName = "Social Media"
                        },
                        new
                        {
                            Source_Id = new Guid("d11a2d99-142d-4b24-b699-cfa6d73a4009"),
                            SourceName = "Webinar"
                        },
                        new
                        {
                            Source_Id = new Guid("1d0b46ac-9b56-4e07-9d22-468147592aae"),
                            SourceName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Product", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id");

                    b.HasIndex("UpdaterId");

                    b.ToTable("PRODUCTS", (string)null);

                    b.HasData(
                        new
                        {
                            Product_Id = new Guid("00dcdcd5-ddb8-4003-be11-824bccd6a981"),
                            Benefits = "Accidental Death, Accidental Dismemberment and/or Disablement, Accident Medical Reimbursement, Cash Assistance Due to Food Poisoning",
                            ProductDescription = "CL Personal Accident Nano Insurance covers loss for Accidental Death, Disablement, or Dismemberment, and Cash Assistance due to Food Poisoning.",
                            ProductName = "CL Personal Accident Nano",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7616),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Product_Id = new Guid("67c4ef36-ee43-44f0-ade6-7dd533859471"),
                            Benefits = "Accidental Death, Accidental Dismemberment and/or Disablement, Accident Medical Reimbursement, Accidental Burial Benefit, Cash Assistance Benefit, Fire Cash Assistance",
                            ProductDescription = "CL Personal Accident Nano Plus Insurance covers Accidental Death, Disablement, or Dismemberment, Accident Medical Reimbursement, Accident Burial Benefit, Cash Assistance benefit, and Fire Cash Assistance.",
                            ProductName = "CL Personal Accident Nano Plus",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7621),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Product_Id = new Guid("0a73e398-d736-41fe-8832-d46bb5e9cf80"),
                            Benefits = "Earthquake, Typhoon, Flood, Windstorm, Volcanic Eruption and other Acts of Nature, Extended Coverage, BOWTAP, BWD, SL and other water related damages, Vandalism/Spontaneous Combustion, All Other Losses",
                            ProductDescription = "CL MicroEnterpriseProtekis a Property Insurance Program specially designed for Cebuana Lhuillier clients. It covers loss “ALL Risks” of physical loss, destruction of or damage to the property of the insured and wholly attributable to any sudden and unforeseen cause, except as hereinafter excluded, occurring during the currency of the policy.",
                            ProductName = "CL MicroEnterpriseProtek",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7623),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Product_Id = new Guid("a020c593-8afd-4448-895a-a65b397fe12a"),
                            Benefits = "Death Benefit, Accident or Sickness Emergency Cash Assistance, Accidental Dismemberment and/or Disablement, Murder and Unprovoked Assault and Residential Fire Reconstruction cash assistance",
                            ProductDescription = "For as low as P50, each certificate is valid for four (4) months from the date of issuance and can be availed up to a maximum of 5 certificates per insured.",
                            ProductName = "ProtectMAX",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7625),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Product_Id = new Guid("38b39940-d870-4fb3-a48c-4b1b8956fd5f"),
                            Benefits = "24/7 Call-a-doc, OP ER One Time use (All causes), Daily Hospital Income Benefit (All Causes)",
                            ProductDescription = "An Individual Personal Accident Insurance specifically designed for Cebuana Lhuillier clients.It covers Accidental Death and Disability (AD&D), Double Indemnity, 24/7 Call-a-doc, OP ER One Time use and Daily Hospital Income Benefit.",
                            ProductName = "CL Health Care",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7626),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Product_Id = new Guid("35c4ed8b-7f2c-453e-afaf-36a6c08c2d92"),
                            Benefits = "Accidental Death, Accidental Dismemberment and/or Disablement",
                            ProductDescription = "Covers Accidental Death and Accidental Dismemberment and/or Disablement Benefit.",
                            ProductName = "CL Personal Accident Basic",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7629),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        },
                        new
                        {
                            Product_Id = new Guid("4326caf0-c13a-4ce0-b8ce-8d0c15881bee"),
                            Benefits = "The Policy is Effective for one (1) year from the date of issuance or after payment of claim,whichever comes first.",
                            ProductDescription = "covers the medical expenses incurred within a year from the date of issuance or purchase by the InsuredPerson for the treatment of an eligible emergency condition, availment of which caneither be as an Out-Patient in the Emergency Room Department or as an In-Patient of aHospital via cash assistance.",
                            ProductName = "CL ER Care",
                            UpdateDate = new DateTime(2023, 4, 17, 4, 11, 22, 226, DateTimeKind.Local).AddTicks(7630),
                            UpdatedBy = new Guid("2592c9e0-ad72-4ca7-be82-6defe5aae304")
                        });
                });

            modelBuilder.Entity("CRMS.Models.Records.Appointments", b =>
                {
                    b.Property<Guid>("Appointment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchedStatus")
                        .HasColumnType("int");

                    b.HasKey("Appointment_Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PurposeId");

                    b.ToTable("APPOINTMENTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Records.Engagement", b =>
                {
                    b.Property<Guid>("Engagement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommsMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ETypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Engagement_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Engagement_Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Engagement_Id");

                    b.HasIndex("CommsMethodId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ETypeId");

                    b.HasIndex("EffectivityId");

                    b.ToTable("ENGAGEMENTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Records.Leads", b =>
                {
                    b.Property<Guid>("Leads_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Leads_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrefContactDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefContactMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefContactTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProspectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Leads_Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProspectId");

                    b.HasIndex("StatusId");

                    b.ToTable("LEADS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.Property<Guid?>("RollingTransactions_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TransacationTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RollingTransactions_ID");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("ROLLING TRANSACTIONS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("30367b9c-0f68-4e0f-b1ef-ec3a2a051b92"),
                            ConcurrencyStamp = "bdc341e4-b2ca-4fb4-b779-de7f199921f6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("e0ef033b-90e1-4afb-afc7-7e17cc12a2da"),
                            ConcurrencyStamp = "96d84640-11ca-415a-a772-b19f7c9dffc5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("14b3ff27-4019-4c20-bb27-902ea8245e2b"),
                            RoleId = new Guid("30367b9c-0f68-4e0f-b1ef-ec3a2a051b92")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("ContactCreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ContactCreator");

                    b.HasOne("CRMS.Models.ApplicationUser", "Owner")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactOwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ContactOwner");

                    b.HasOne("CRMS.Models.ApplicationUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ContactUpdater");

                    b.Navigation("Creator");

                    b.Navigation("Owner");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("CRMS.Models.Product", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("CRMS.Models.Records.Appointments", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "prospect")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentProspect");

                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentCreator");

                    b.HasOne("CRMS.Models.Customization.AppointmentPurpose", "AppointmentPurpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentPurpose");

                    b.Navigation("AppointmentPurpose");

                    b.Navigation("User");

                    b.Navigation("prospect");
                });

            modelBuilder.Entity("CRMS.Models.Records.Engagement", b =>
                {
                    b.HasOne("CRMS.Models.Customization.CommunicationMethod", "CommunicationMethod")
                        .WithMany()
                        .HasForeignKey("CommsMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommunicationMethod");

                    b.HasOne("CRMS.Models.Contacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contacts");

                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Creator");

                    b.HasOne("CRMS.Models.Customization.EngagementType", "EngagementType")
                        .WithMany()
                        .HasForeignKey("ETypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EngagementType");

                    b.HasOne("CRMS.Models.Customization.Effectivity", "Effectivity")
                        .WithMany()
                        .HasForeignKey("EffectivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Effectivity");

                    b.Navigation("CommunicationMethod");

                    b.Navigation("Contacts");

                    b.Navigation("Effectivity");

                    b.Navigation("EngagementType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRMS.Models.Records.Leads", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsCreator");

                    b.HasOne("CRMS.Models.Customization.Source", "source")
                        .WithMany()
                        .HasForeignKey("LeadSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsSource");

                    b.HasOne("CRMS.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsProduct");

                    b.HasOne("CRMS.Models.Contacts", "prospect")
                        .WithMany()
                        .HasForeignKey("ProspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsProspect");

                    b.HasOne("CRMS.Models.Customization.LeadStatus", "status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsStatus");

                    b.Navigation("User");

                    b.Navigation("product");

                    b.Navigation("prospect");

                    b.Navigation("source");

                    b.Navigation("status");
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "Contacts")
                        .WithOne("Transactions")
                        .HasForeignKey("CRMS.Models.RollingTransactions", "ContactId")
                        .HasConstraintName("FK_TransactionsOfContact");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
