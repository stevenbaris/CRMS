// <auto-generated />
using System;
using CRMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMS.Migrations
{
    [DbContext(typeof(CRMSDbContext))]
    [Migration("20230403092822_initDbSchema")]
    partial class initDbSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.AppointmentPurpose", b =>
                {
                    b.Property<Guid>("Purpose_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurposeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Purpose_Id");

                    b.ToTable("APPOINTMENT_PURPOSES", (string)null);

                    b.HasData(
                        new
                        {
                            Purpose_Id = new Guid("97b81117-da08-47fe-a24e-60d8f7be34fc"),
                            PurposeName = "Fact-Find"
                        },
                        new
                        {
                            Purpose_Id = new Guid("43b0f213-a447-4f12-980a-b948403fc490"),
                            PurposeName = "Presentation"
                        },
                        new
                        {
                            Purpose_Id = new Guid("3dbba4ea-3e87-436a-88d4-2bea2faa2e89"),
                            PurposeName = "Proposal"
                        },
                        new
                        {
                            Purpose_Id = new Guid("1ab2f946-f117-4702-ad14-05150a77243f"),
                            PurposeName = "Sales Closing"
                        },
                        new
                        {
                            Purpose_Id = new Guid("4bb4af14-f406-4836-9ff5-07a136a20c31"),
                            PurposeName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.CommunicationMethod", b =>
                {
                    b.Property<Guid>("CommunicationMethod_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicationMethod_Id");

                    b.ToTable("ENGAGEMENT_COMMUNICATION METHODS", (string)null);

                    b.HasData(
                        new
                        {
                            CommunicationMethod_Id = new Guid("47947c54-cbea-4751-bf82-ac43fdbdbf55"),
                            CommunicationMethodName = "Facebook"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("68bf1f8e-f31d-418e-824c-2f55db4e81e7"),
                            CommunicationMethodName = "Instagram"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("d63e684c-fe71-427b-8620-19f57c9fa95a"),
                            CommunicationMethodName = "WhatsApp"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("ca67a03e-44b4-4cd0-885c-17e5c2cee30a"),
                            CommunicationMethodName = "Line"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("895b5fba-8559-4aa2-8a1e-1dfb4d371903"),
                            CommunicationMethodName = "Phone Call"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("cd1d02a3-fcbc-49b6-afb0-0c789ad63035"),
                            CommunicationMethodName = "Test Message"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("7dc22be9-52d8-4d83-b1a0-2e01456aa305"),
                            CommunicationMethodName = "Email"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("ebf32643-30cd-4173-b9cf-0ec9a2b6c1c3"),
                            CommunicationMethodName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Property<Guid>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactCreatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_Id");

                    b.HasIndex("ContactCreatorID");

                    b.ToTable("CONTACTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Effectivity", b =>
                {
                    b.Property<Guid>("Effectivity_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Effectivity_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Effectivity_Id");

                    b.ToTable("ENGAGEMENT_EFFECTIVITY", (string)null);

                    b.HasData(
                        new
                        {
                            Effectivity_Id = new Guid("6174d5d8-631f-4078-9330-2d7508f247d5"),
                            Effectivity_Name = "Not Read"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("8d906718-db4c-4206-84e5-0153921199e0"),
                            Effectivity_Name = "Read but no response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("d578ba6c-d51e-4774-8314-9c406bd5d450"),
                            Effectivity_Name = "Simple Response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("d0a08d8c-246f-42ca-a15a-26529aefdc14"),
                            Effectivity_Name = "Good Engagement"
                        });
                });

            modelBuilder.Entity("CRMS.Models.EngagementType", b =>
                {
                    b.Property<Guid>("EType_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngagementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EType_Id");

                    b.ToTable("ENGAGEMENT_ENGAGEMENT-TYPES", (string)null);

                    b.HasData(
                        new
                        {
                            EType_Id = new Guid("1451297a-93da-47b9-a5eb-67544830726f"),
                            EngagementName = "Congratulations"
                        },
                        new
                        {
                            EType_Id = new Guid("057bb849-c0a0-4d27-8296-4855bf0ab0c3"),
                            EngagementName = "Birthday"
                        },
                        new
                        {
                            EType_Id = new Guid("54c79ced-f46d-4f52-ad58-f4d7bcf9b053"),
                            EngagementName = "Anniversary"
                        },
                        new
                        {
                            EType_Id = new Guid("748323cb-aaba-4740-9c25-59cf2e4a5c8d"),
                            EngagementName = "Holiday"
                        },
                        new
                        {
                            EType_Id = new Guid("ae75c350-a351-43bb-8c0e-dfd068c8a7de"),
                            EngagementName = "Discount"
                        },
                        new
                        {
                            EType_Id = new Guid("1af2cf2f-2bda-45bb-9d86-2e6a49464517"),
                            EngagementName = "Company News"
                        },
                        new
                        {
                            EType_Id = new Guid("e861bd4f-517e-4880-bb3d-26a358c98a69"),
                            EngagementName = "New Product"
                        },
                        new
                        {
                            EType_Id = new Guid("d335af28-3fc8-44bb-8f9f-9d8420ce749d"),
                            EngagementName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.LeadStatus", b =>
                {
                    b.Property<Guid>("LeadStatus_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeadStatus_Id");

                    b.ToTable("LEADS_STATUSES", (string)null);

                    b.HasData(
                        new
                        {
                            LeadStatus_Id = new Guid("3fdcd373-b594-415b-a048-c64d9f9567df"),
                            LeadStatusName = "Contacted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("a10052cd-dc35-4b5e-832d-bced13f6de72"),
                            LeadStatusName = "Met"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("af2f7795-9909-4fe0-850c-237ad1bdf11d"),
                            LeadStatusName = "Proposal Generated"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("dc47582f-e332-4c99-9019-1f97acdb8688"),
                            LeadStatusName = "Application Submitted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("b629c8c0-9cca-46f6-acd0-ab636fe70491"),
                            LeadStatusName = "Policy Issued"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("8160025e-8e8b-4a15-9084-7ab149cc3eca"),
                            LeadStatusName = "Lead is Dead"
                        });
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.Property<Guid?>("RollingTransactions_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TransacationTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RollingTransactions_ID");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("ROLLING TRANSACTIONS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Source", b =>
                {
                    b.Property<Guid>("Source_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Source_Id");

                    b.ToTable("LEADS_SOURCES", (string)null);

                    b.HasData(
                        new
                        {
                            Source_Id = new Guid("4a166d72-d16b-4284-ae89-f4877a29a68d"),
                            SourceName = "Referral"
                        },
                        new
                        {
                            Source_Id = new Guid("d66e4b47-43ac-433e-89d4-dad453747357"),
                            SourceName = "Friend"
                        },
                        new
                        {
                            Source_Id = new Guid("d2deb997-1e0b-44db-af11-84ea001ef78f"),
                            SourceName = "Compony-Generated"
                        },
                        new
                        {
                            Source_Id = new Guid("63dcf354-2593-453d-8f5f-45d0f396639c"),
                            SourceName = "Social Media"
                        },
                        new
                        {
                            Source_Id = new Guid("217c4929-b995-4ab6-897c-348f48fe31a1"),
                            SourceName = "Webinar"
                        },
                        new
                        {
                            Source_Id = new Guid("38c95f40-985d-4435-aee9-d863d348f162"),
                            SourceName = "Others"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactCreatorID")
                        .HasConstraintName("FK_ContactCreator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "Contacts")
                        .WithOne("Transactions")
                        .HasForeignKey("CRMS.Models.RollingTransactions", "ContactId")
                        .HasConstraintName("FK_TransactionsOfContact");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
