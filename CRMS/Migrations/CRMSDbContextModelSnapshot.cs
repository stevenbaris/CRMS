// <auto-generated />
using System;
using CRMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMS.Migrations
{
    [DbContext(typeof(CRMSDbContext))]
    partial class CRMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CityAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4274999-2c7e-4cc0-8a65-2381570c01c6"),
                            AccessFailedCount = 0,
                            CityAddress = "Makati",
                            ConcurrencyStamp = "791f1789-7c0d-4a3e-ae38-1a877ecef31d",
                            DOB = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "su@crms.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "SU@CRMS.COM",
                            NormalizedUserName = "SYSADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGr2hZWmn+8mxAbr95+sUKDoB86KaJDY1Of0AuHb1Puelw8Cgq3CgFiw5BzqM9VZoA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "SysAdmin",
                            isHidden = true
                        },
                        new
                        {
                            Id = new Guid("ad5f6c61-63ef-4be2-a9fa-7376f3f0f828"),
                            AccessFailedCount = 0,
                            CityAddress = "Pasay",
                            ConcurrencyStamp = "db6e4909-2159-451a-b3d3-bbb840307081",
                            DOB = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "cgl@crms.com",
                            EmailConfirmed = true,
                            FirstName = "Charl",
                            LastName = "Legista",
                            LockoutEnabled = true,
                            NormalizedEmail = "CGL@CRMS.COM",
                            NormalizedUserName = "CGL@CRMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIn4zwscNkGVNJLeMPeXmjeRViNT1XN3FT4VJJMpILjM/NbTjS6z+NSYDUqx5u889A==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cgl@crms.com",
                            isHidden = false
                        },
                        new
                        {
                            Id = new Guid("1d20c7d3-d246-4fc2-9b15-75e4b5769074"),
                            AccessFailedCount = 0,
                            CityAddress = "General Trias",
                            ConcurrencyStamp = "90be228b-4d46-466e-b357-a79e51b89a75",
                            DOB = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "sbb@crms.com",
                            EmailConfirmed = true,
                            FirstName = "Steven",
                            LastName = "Baris",
                            LockoutEnabled = true,
                            NormalizedEmail = "SBB@CRMS.COM",
                            NormalizedUserName = "SBB@CRMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDEBeac4uRZjCvAteS6mE0l/A7JKr+OanqF0ppOUORXUmMeuMxhpP2JfJ86nzyIDSw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "sbb@crms.com",
                            isHidden = false
                        });
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Property<Guid>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactCreatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactOwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocal")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Contact_Id");

                    b.HasIndex("ContactCreatorID");

                    b.HasIndex("ContactOwnerID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CONTACTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Customization.AppointmentPurpose", b =>
                {
                    b.Property<Guid>("Purpose_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurposeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Purpose_Id");

                    b.ToTable("APPOINTMENT_PURPOSES", (string)null);

                    b.HasData(
                        new
                        {
                            Purpose_Id = new Guid("499871d7-1bc7-4102-857e-8972755c1a1c"),
                            PurposeName = "Fact-Find"
                        },
                        new
                        {
                            Purpose_Id = new Guid("727a1bc8-3a8f-4ee8-97d3-6a94531b2b83"),
                            PurposeName = "Presentation"
                        },
                        new
                        {
                            Purpose_Id = new Guid("8ad436ec-a101-4bb8-a320-8cdd1d50a914"),
                            PurposeName = "Proposal"
                        },
                        new
                        {
                            Purpose_Id = new Guid("bffea4d7-9e98-4bb3-a48b-67225c55ecac"),
                            PurposeName = "Sales Closing"
                        },
                        new
                        {
                            Purpose_Id = new Guid("06ea6c17-714f-47ef-a50a-177bdea0934d"),
                            PurposeName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.CommunicationMethod", b =>
                {
                    b.Property<Guid>("CommunicationMethod_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicationMethod_Id");

                    b.ToTable("ENGAGEMENT_COMMUNICATION METHODS", (string)null);

                    b.HasData(
                        new
                        {
                            CommunicationMethod_Id = new Guid("bef323bd-63c3-4049-8d1b-c2ab220679a6"),
                            CommunicationMethodName = "Facebook"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("32b8e209-59f0-4a25-8a21-8a679760f2ac"),
                            CommunicationMethodName = "Instagram"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("6b27026b-6394-4a31-ac3e-3f0e74c77a2d"),
                            CommunicationMethodName = "WhatsApp"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("99e90010-0595-410a-aa15-8cf020ccbd20"),
                            CommunicationMethodName = "Line"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("18357e57-c373-4f9c-ae33-76832c00104c"),
                            CommunicationMethodName = "Phone Call"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("a1514fe1-14b1-4dae-9611-5e89110135a2"),
                            CommunicationMethodName = "Text Message"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("214e8e5a-ac60-4e48-a67e-3dbbb40c5686"),
                            CommunicationMethodName = "Email"
                        },
                        new
                        {
                            CommunicationMethod_Id = new Guid("af9cf827-ff7f-497a-8353-3344ff0b1bb7"),
                            CommunicationMethodName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.Effectivity", b =>
                {
                    b.Property<Guid>("Effectivity_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Effectivity_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Effectivity_Id");

                    b.ToTable("ENGAGEMENT_EFFECTIVITY", (string)null);

                    b.HasData(
                        new
                        {
                            Effectivity_Id = new Guid("e23d60bb-7a4e-4d65-b187-f507e90dfab8"),
                            Effectivity_Name = "Not Read"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("9ec40974-f249-40ff-abe2-43bbe0746c25"),
                            Effectivity_Name = "Read but no response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("aa0e640d-c539-4d85-8aa7-798807dbbea7"),
                            Effectivity_Name = "Simple Response"
                        },
                        new
                        {
                            Effectivity_Id = new Guid("f468e49a-c029-4fca-a45f-f5bb71f78757"),
                            Effectivity_Name = "Good Engagement"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.EngagementType", b =>
                {
                    b.Property<Guid>("EType_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EngagementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EType_Id");

                    b.ToTable("ENGAGEMENT_ENGAGEMENT-TYPES", (string)null);

                    b.HasData(
                        new
                        {
                            EType_Id = new Guid("784c6bec-1b25-4d57-9a35-a2c8c2c5cc95"),
                            EngagementName = "Congratulations"
                        },
                        new
                        {
                            EType_Id = new Guid("432fd84e-576a-49ec-936f-1f3dcd358a0c"),
                            EngagementName = "Birthday"
                        },
                        new
                        {
                            EType_Id = new Guid("7c144eb1-e968-4a70-ae61-e6a40e892631"),
                            EngagementName = "Anniversary"
                        },
                        new
                        {
                            EType_Id = new Guid("749126c4-2d23-4c22-99cd-d903d670c9cb"),
                            EngagementName = "Holiday"
                        },
                        new
                        {
                            EType_Id = new Guid("e8782cc4-9a0b-4313-acd4-d70a6314ed31"),
                            EngagementName = "Discount"
                        },
                        new
                        {
                            EType_Id = new Guid("772282ba-5e65-4f65-97bd-b2745bd0d6c2"),
                            EngagementName = "Company News"
                        },
                        new
                        {
                            EType_Id = new Guid("cefdbe49-bc17-4afb-87d5-3340c5f5b700"),
                            EngagementName = "New Product"
                        },
                        new
                        {
                            EType_Id = new Guid("1a43ad67-336e-4511-8411-0a133c84e0ce"),
                            EngagementName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.LeadStatus", b =>
                {
                    b.Property<Guid>("LeadStatus_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeadStatus_Id");

                    b.ToTable("LEADS_STATUSES", (string)null);

                    b.HasData(
                        new
                        {
                            LeadStatus_Id = new Guid("7a45fef7-675c-4946-834d-0d32bbabaf49"),
                            LeadStatusName = "Contacted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("6d0ec1f7-2cc2-4a01-af87-916495693238"),
                            LeadStatusName = "Met"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("1271a7ed-bd75-4376-b472-221a614c4d40"),
                            LeadStatusName = "Proposal Generated"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("65ea5bc2-716a-4f85-80cf-f29cde0de0aa"),
                            LeadStatusName = "Application Submitted"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("b2458401-af60-4e14-8bfc-0f0f3db52799"),
                            LeadStatusName = "Policy Issued"
                        },
                        new
                        {
                            LeadStatus_Id = new Guid("592b29b1-2afa-4004-98d0-ee4847d91825"),
                            LeadStatusName = "Lead is Dead"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Customization.Source", b =>
                {
                    b.Property<Guid>("Source_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Source_Id");

                    b.ToTable("LEADS_SOURCES", (string)null);

                    b.HasData(
                        new
                        {
                            Source_Id = new Guid("77f583a7-8e34-4d23-a1ae-f73b5f31b2ab"),
                            SourceName = "Referral"
                        },
                        new
                        {
                            Source_Id = new Guid("b915d906-52b0-4afc-a880-09e1e1f86e5e"),
                            SourceName = "Friend"
                        },
                        new
                        {
                            Source_Id = new Guid("993f9d84-caf7-4730-add5-5f836cdb47e6"),
                            SourceName = "Company-Generated"
                        },
                        new
                        {
                            Source_Id = new Guid("cfa5213c-78cb-4c9b-8d89-65448883a200"),
                            SourceName = "Social Media"
                        },
                        new
                        {
                            Source_Id = new Guid("0b53fbe1-c7a3-4feb-8f81-960142e7a58c"),
                            SourceName = "Webinar"
                        },
                        new
                        {
                            Source_Id = new Guid("23c5aafb-3cf8-491a-91f8-fec7f2699024"),
                            SourceName = "Others"
                        });
                });

            modelBuilder.Entity("CRMS.Models.Product", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Product_Id");

                    b.ToTable("PRODUCTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Records.Appointments", b =>
                {
                    b.Property<Guid>("Appointment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Appointment_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchedStatus")
                        .HasColumnType("int");

                    b.HasKey("Appointment_Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PurposeId");

                    b.ToTable("APPOINTMENTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Records.Engagement", b =>
                {
                    b.Property<Guid>("Engagement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommsMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ETypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Engagement_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Engagement_Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Engagement_Id");

                    b.HasIndex("CommsMethodId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ETypeId");

                    b.HasIndex("EffectivityId");

                    b.ToTable("ENGAGEMENTS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Records.Leads", b =>
                {
                    b.Property<Guid>("Leads_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Leads_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrefContactDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefContactMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefContactTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProspectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Leads_Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProspectId");

                    b.HasIndex("StatusId");

                    b.ToTable("LEADS", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.Property<Guid?>("RollingTransactions_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TransacationTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RollingTransactions_ID");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("ROLLING TRANSACTIONS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eab657c4-6689-4028-bbb4-a6896c08c0b0"),
                            ConcurrencyStamp = "f2f178fe-c1bf-4876-905b-cd27ab5f8fda",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("85990ed4-8dbf-42a2-8ab2-3c9021385646"),
                            ConcurrencyStamp = "a974f481-64ba-4c9b-ba4e-b71ecf18a976",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e4274999-2c7e-4cc0-8a65-2381570c01c6"),
                            RoleId = new Guid("eab657c4-6689-4028-bbb4-a6896c08c0b0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("ContactCreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ContactCreator");

                    b.HasOne("CRMS.Models.ApplicationUser", "Owner")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactOwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ContactOwner");

                    b.HasOne("CRMS.Models.ApplicationUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ContactUpdater");

                    b.Navigation("Creator");

                    b.Navigation("Owner");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("CRMS.Models.Records.Appointments", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "prospect")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentProspect");

                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentCreator");

                    b.HasOne("CRMS.Models.Customization.AppointmentPurpose", "AppointmentPurpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentPurpose");

                    b.Navigation("AppointmentPurpose");

                    b.Navigation("User");

                    b.Navigation("prospect");
                });

            modelBuilder.Entity("CRMS.Models.Records.Engagement", b =>
                {
                    b.HasOne("CRMS.Models.Customization.CommunicationMethod", "CommunicationMethod")
                        .WithMany()
                        .HasForeignKey("CommsMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommunicationMethod");

                    b.HasOne("CRMS.Models.Contacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contacts");

                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Creator");

                    b.HasOne("CRMS.Models.Customization.EngagementType", "EngagementType")
                        .WithMany()
                        .HasForeignKey("ETypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EngagementType");

                    b.HasOne("CRMS.Models.Customization.Effectivity", "Effectivity")
                        .WithMany()
                        .HasForeignKey("EffectivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Effectivity");

                    b.Navigation("CommunicationMethod");

                    b.Navigation("Contacts");

                    b.Navigation("Effectivity");

                    b.Navigation("EngagementType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRMS.Models.Records.Leads", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsCreator");

                    b.HasOne("CRMS.Models.Customization.Source", "source")
                        .WithMany()
                        .HasForeignKey("LeadSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsSource");

                    b.HasOne("CRMS.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsProduct");

                    b.HasOne("CRMS.Models.Contacts", "prospect")
                        .WithMany()
                        .HasForeignKey("ProspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsProspect");

                    b.HasOne("CRMS.Models.Customization.LeadStatus", "status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadsStatus");

                    b.Navigation("User");

                    b.Navigation("product");

                    b.Navigation("prospect");

                    b.Navigation("source");

                    b.Navigation("status");
                });

            modelBuilder.Entity("CRMS.Models.RollingTransactions", b =>
                {
                    b.HasOne("CRMS.Models.Contacts", "Contacts")
                        .WithOne("Transactions")
                        .HasForeignKey("CRMS.Models.RollingTransactions", "ContactId")
                        .HasConstraintName("FK_TransactionsOfContact");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CRMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMS.Models.ApplicationUser", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("CRMS.Models.Contacts", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
